# dune build
# OCAMLPARAM: unset
# Shared cache: disabled
# Workspace root: /Users/luellaoudille/cs/cs107/chomp
# Auto-detected concurrency: 8
$ /Users/luellaoudille/.opam/4.14.0/bin/ocamlc.opt -config > /var/folders/fv/dnm5xp0s6d5dfpn_1dw039m40000gq/T/dune_064de0_output
# Dune context:
#  { name = "default"
#  ; kind = "default"
#  ; profile = Dev
#  ; merlin = true
#  ; for_host = None
#  ; fdo_target_exe = None
#  ; build_dir = In_build_dir "default"
#  ; ocaml_bin = External "/Users/luellaoudille/.opam/4.14.0/bin"
#  ; ocaml = Ok External "/Users/luellaoudille/.opam/4.14.0/bin/ocaml"
#  ; ocamlc = External "/Users/luellaoudille/.opam/4.14.0/bin/ocamlc.opt"
#  ; ocamlopt =
#      Ok External "/Users/luellaoudille/.opam/4.14.0/bin/ocamlopt.opt"
#  ; ocamldep =
#      Ok External "/Users/luellaoudille/.opam/4.14.0/bin/ocamldep.opt"
#  ; ocamlmklib =
#      Ok External "/Users/luellaoudille/.opam/4.14.0/bin/ocamlmklib.opt"
#  ; env =
#      map
#        { "DUNE_OCAML_HARDCODED" : "/Users/luellaoudille/.opam/4.14.0/lib"
#        ; "DUNE_OCAML_STDLIB" : "/Users/luellaoudille/.opam/4.14.0/lib/ocaml"
#        ; "DUNE_SOURCEROOT" : "/Users/luellaoudille/cs/cs107/chomp"
#        ; "INSIDE_DUNE" : "/Users/luellaoudille/cs/cs107/chomp/_build/default"
#        ; "MANPATH" :
#            "/Users/luellaoudille/cs/cs107/chomp/_build/install/default/man"
#        ; "OCAMLFIND_IGNORE_DUPS_IN" :
#            "/Users/luellaoudille/cs/cs107/chomp/_build/install/default/lib"
#        ; "OCAMLPATH" :
#            "/Users/luellaoudille/cs/cs107/chomp/_build/install/default/lib"
#        ; "OCAMLTOP_INCLUDE_PATH" :
#            "/Users/luellaoudille/cs/cs107/chomp/_build/install/default/lib/toplevel"
#        ; "OCAML_COLOR" : "always"
#        ; "OPAMCOLOR" : "always"
#        }
#  ; findlib_paths = [ External "/Users/luellaoudille/.opam/4.14.0/lib" ]
#  ; natdynlink_supported = true
#  ; supports_shared_libraries = true
#  ; ocaml_config =
#      { version = "4.14.0"
#      ; standard_library_default =
#          "/Users/luellaoudille/.opam/4.14.0/lib/ocaml"
#      ; standard_library = "/Users/luellaoudille/.opam/4.14.0/lib/ocaml"
#      ; standard_runtime = "the_standard_runtime_variable_was_deleted"
#      ; ccomp_type = "cc"
#      ; c_compiler = "cc"
#      ; ocamlc_cflags =
#          [ "-O2"; "-fno-strict-aliasing"; "-fwrapv"; "-pthread" ]
#      ; ocamlc_cppflags = [ "-D_FILE_OFFSET_BITS=64" ]
#      ; ocamlopt_cflags =
#          [ "-O2"; "-fno-strict-aliasing"; "-fwrapv"; "-pthread" ]
#      ; ocamlopt_cppflags = [ "-D_FILE_OFFSET_BITS=64" ]
#      ; bytecomp_c_compiler =
#          [ "cc"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-pthread"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ]
#      ; bytecomp_c_libraries = [ "-lm"; "-lpthread" ]
#      ; native_c_compiler =
#          [ "cc"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-pthread"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ]
#      ; native_c_libraries = [ "-lm" ]
#      ; native_pack_linker = [ "ld"; "-r"; "-o" ]
#      ; cc_profile = []
#      ; architecture = "amd64"
#      ; model = "default"
#      ; int_size = 63
#      ; word_size = 64
#      ; system = "macosx"
#      ; asm = [ "cc"; "-c"; "-Wno-trigraphs" ]
#      ; asm_cfi_supported = true
#      ; with_frame_pointers = false
#      ; ext_exe = ""
#      ; ext_obj = ".o"
#      ; ext_asm = ".s"
#      ; ext_lib = ".a"
#      ; ext_dll = ".so"
#      ; os_type = "Unix"
#      ; default_executable_name = "a.out"
#      ; systhread_supported = true
#      ; host = "x86_64-apple-darwin20.6.0"
#      ; target = "x86_64-apple-darwin20.6.0"
#      ; profiling = false
#      ; flambda = false
#      ; spacetime = false
#      ; safe_string = true
#      ; exec_magic_number = "Caml1999X031"
#      ; cmi_magic_number = "Caml1999I031"
#      ; cmo_magic_number = "Caml1999O031"
#      ; cma_magic_number = "Caml1999A031"
#      ; cmx_magic_number = "Caml1999Y031"
#      ; cmxa_magic_number = "Caml1999Z031"
#      ; ast_impl_magic_number = "Caml1999M031"
#      ; ast_intf_magic_number = "Caml1999N031"
#      ; cmxs_magic_number = "Caml1999D031"
#      ; cmt_magic_number = "Caml1999T031"
#      ; natdynlink_supported = true
#      ; supports_shared_libraries = true
#      ; windows_unicode = false
#      }
#  }
$ (cd _build/default && /Users/luellaoudille/.opam/4.14.0/bin/ocamldep.opt -modules -impl semant.ml) > _build/default/.toplevel.eobjs/dune__exe__Semant.impl.d
$ (cd _build/default && /Users/luellaoudille/.opam/4.14.0/bin/ocamlc.opt -w @1..3@5..28@30..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -warn-error -A -g -bin-annot -I .toplevel.eobjs/byte -no-alias-deps -opaque -open Dune__exe -o .toplevel.eobjs/byte/dune__exe__Semant.cmo -c -impl semant.ml)
> File "semant.ml", line 91, characters 10-22:
> 91 |   let rec convert_expr scope e = match e with
>                ^^^^^^^^^^^^
> Warning 39 [unused-rec-flag]: unused rec flag.
> File "semant.ml", lines 113-120, characters 43-63:
> 113 | ...........................................match stmt with
> 114 |     (* TODO: block, expr, var (maybe) *)
> 115 |     Block(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 116 |     | Return(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 120 |     | Var(vdecl) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> Warning 8 [partial-match]: this pattern-matching is not exhaustive.
> Here is an example of a case that is not matched:
> Expr _
> File "semant.ml", line 113, characters 10-22:
> 113 |   let rec convert_stmt (scope, acc) stmt = match stmt with
>                 ^^^^^^^^^^^^
> Warning 39 [unused-rec-flag]: unused rec flag.
> File "semant.ml", line 179, characters 10-11:
> 179 |         | _ -> match sstmt_list with
>                 ^
> Warning 11 [redundant-case]: this match case is unused.
> File "semant.ml", lines 175-181, characters 12-70:
> 175 | ............match typ with
> 176 |         Void -> match sstmt_list with
> 177 |                 (SReturn((ret_typ, _)) :: _) -> eq_type_err ret_typ Void 
> 178 |                 | _ -> true         
> 179 |         | _ -> match sstmt_list with
> 180 |               (SReturn((ret_typ, _)) :: _) -> eq_type_err ret_typ typ
> 181 |               | _ -> (raise (TypeError ("no return statement found")))
> Warning 8 [partial-match]: this pattern-matching is not exhaustive.
> Here is an example of a case that is not matched:
> (Int|Bool|Char|Bit|Nibble|Byte|Word|String|Poly|Bin|List _|Func (_, _))
> File "semant.ml", line 49, characters 8-16:
> 49 |     let validate =
>              ^^^^^^^^
> Warning 26 [unused-var]: unused variable validate.
> File "semant.ml", line 81, characters 6-13:
> 81 |   let eq_type ty1 ty2 =
>            ^^^^^^^
> Warning 26 [unused-var]: unused variable eq_type.
> File "semant.ml", line 91, characters 23-28:
> 91 |   let rec convert_expr scope e = match e with
>                             ^^^^^
> Warning 27 [unused-var-strict]: unused variable scope.
> File "semant.ml", line 92, characters 12-13:
> 92 |     Literal l -> (Int, SLiteral(1))
>                  ^
> Warning 27 [unused-var-strict]: unused variable l.
> File "semant.ml", line 93, characters 14-15:
> 93 |     | BoolLit b -> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable b.
> File "semant.ml", line 94, characters 14-15:
> 94 |     | CharLit c -> (Int, SLiteral(1)) 
>                    ^
> Warning 27 [unused-var-strict]: unused variable c.
> File "semant.ml", line 95, characters 16-17:
> 95 |     | StringLit s -> (Int, SLiteral(1))
>                      ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 96, characters 9-10:
> 96 |     | Id s -> (Int, SLiteral(1))
>               ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 97, characters 13-15:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                   ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 97, characters 17-18:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                       ^
> Warning 27 [unused-var-strict]: unused variable o.
> File "semant.ml", line 97, characters 20-22:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                          ^^
> Warning 27 [unused-var-strict]: unused variable e2.
> File "semant.ml", line 98, characters 12-13:
> 98 |     | Unop (u, e) -> (Int, SLiteral(1))
>                  ^
> Warning 27 [unused-var-strict]: unused variable u.
> File "semant.ml", line 98, characters 15-16:
> 98 |     | Unop (u, e) -> (Int, SLiteral(1))
>                     ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 99, characters 14-15:
> 99 |     | Assign (s, e)-> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 99, characters 17-18:
> 99 |     | Assign (s, e)-> (Int, SLiteral(1))
>                       ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 100, characters 12-13:
> 100 |     | Call (s, es) -> (Int, SLiteral(1))
>                   ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 100, characters 15-17:
> 100 |     | Call (s, es) -> (Int, SLiteral(1))
>                      ^^
> Warning 27 [unused-var-strict]: unused variable es.
> File "semant.ml", line 101, characters 11-13:
> 101 |     | List es -> (Int, SLiteral(1))
>                  ^^
> Warning 27 [unused-var-strict]: unused variable es.
> File "semant.ml", line 103, characters 13-14:
> 103 |     | BinLit s -> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 105, characters 12-13:
> 105 |     | Print e -> (Int, SLiteral(1))
>                   ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 106, characters 14-15:
> 106 |     | PrintLn e -> (Int, SLiteral(1))
>                     ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 115, characters 9-12:
> 115 |     Block(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 116, characters 12-15:
> 116 |     | Return(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                   ^^^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 117, characters 9-11:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 117, characters 13-16:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                    ^^^
> Warning 27 [unused-var-strict]: unused variable st1.
> File "semant.ml", line 117, characters 18-21:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                         ^^^
> Warning 27 [unused-var-strict]: unused variable st2.
> File "semant.ml", line 118, characters 10-12:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                 ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 118, characters 14-16:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                     ^^
> Warning 27 [unused-var-strict]: unused variable e2.
> File "semant.ml", line 118, characters 18-20:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                         ^^
> Warning 27 [unused-var-strict]: unused variable e3.
> File "semant.ml", line 118, characters 22-24:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                             ^^
> Warning 27 [unused-var-strict]: unused variable st.
> File "semant.ml", line 119, characters 12-13:
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                   ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 119, characters 15-17:
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                      ^^
> Warning 27 [unused-var-strict]: unused variable st.
> File "semant.ml", line 120, characters 9-16:
> 120 |     | Var(vdecl) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^^^^^^
> Warning 27 [unused-var-strict]: unused variable vdecl.
$ (cd _build/default && /Users/luellaoudille/.opam/4.14.0/bin/ocamlopt.opt -w @1..3@5..28@30..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -warn-error -A -g -I .toplevel.eobjs/byte -I .toplevel.eobjs/native -intf-suffix .ml -no-alias-deps -opaque -open Dune__exe -o .toplevel.eobjs/native/dune__exe__Toplevel.cmx -c -impl toplevel.ml)
> File "toplevel.ml", line 7, characters 8-12:
> 7 |     let sast = Semant.check ast in
>             ^^^^
> Warning 26 [unused-var]: unused variable sast.
$ (cd _build/default && /Users/luellaoudille/.opam/4.14.0/bin/ocamlopt.opt -w @1..3@5..28@30..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -warn-error -A -g -I .toplevel.eobjs/byte -I .toplevel.eobjs/native -intf-suffix .ml -no-alias-deps -opaque -open Dune__exe -o .toplevel.eobjs/native/dune__exe__Semant.cmx -c -impl semant.ml)
> File "semant.ml", line 91, characters 10-22:
> 91 |   let rec convert_expr scope e = match e with
>                ^^^^^^^^^^^^
> Warning 39 [unused-rec-flag]: unused rec flag.
> File "semant.ml", lines 113-120, characters 43-63:
> 113 | ...........................................match stmt with
> 114 |     (* TODO: block, expr, var (maybe) *)
> 115 |     Block(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 116 |     | Return(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> 120 |     | Var(vdecl) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
> Warning 8 [partial-match]: this pattern-matching is not exhaustive.
> Here is an example of a case that is not matched:
> Expr _
> File "semant.ml", line 113, characters 10-22:
> 113 |   let rec convert_stmt (scope, acc) stmt = match stmt with
>                 ^^^^^^^^^^^^
> Warning 39 [unused-rec-flag]: unused rec flag.
> File "semant.ml", line 179, characters 10-11:
> 179 |         | _ -> match sstmt_list with
>                 ^
> Warning 11 [redundant-case]: this match case is unused.
> File "semant.ml", lines 175-181, characters 12-70:
> 175 | ............match typ with
> 176 |         Void -> match sstmt_list with
> 177 |                 (SReturn((ret_typ, _)) :: _) -> eq_type_err ret_typ Void 
> 178 |                 | _ -> true         
> 179 |         | _ -> match sstmt_list with
> 180 |               (SReturn((ret_typ, _)) :: _) -> eq_type_err ret_typ typ
> 181 |               | _ -> (raise (TypeError ("no return statement found")))
> Warning 8 [partial-match]: this pattern-matching is not exhaustive.
> Here is an example of a case that is not matched:
> (Int|Bool|Char|Bit|Nibble|Byte|Word|String|Poly|Bin|List _|Func (_, _))
> File "semant.ml", line 49, characters 8-16:
> 49 |     let validate =
>              ^^^^^^^^
> Warning 26 [unused-var]: unused variable validate.
> File "semant.ml", line 81, characters 6-13:
> 81 |   let eq_type ty1 ty2 =
>            ^^^^^^^
> Warning 26 [unused-var]: unused variable eq_type.
> File "semant.ml", line 91, characters 23-28:
> 91 |   let rec convert_expr scope e = match e with
>                             ^^^^^
> Warning 27 [unused-var-strict]: unused variable scope.
> File "semant.ml", line 92, characters 12-13:
> 92 |     Literal l -> (Int, SLiteral(1))
>                  ^
> Warning 27 [unused-var-strict]: unused variable l.
> File "semant.ml", line 93, characters 14-15:
> 93 |     | BoolLit b -> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable b.
> File "semant.ml", line 94, characters 14-15:
> 94 |     | CharLit c -> (Int, SLiteral(1)) 
>                    ^
> Warning 27 [unused-var-strict]: unused variable c.
> File "semant.ml", line 95, characters 16-17:
> 95 |     | StringLit s -> (Int, SLiteral(1))
>                      ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 96, characters 9-10:
> 96 |     | Id s -> (Int, SLiteral(1))
>               ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 97, characters 13-15:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                   ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 97, characters 17-18:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                       ^
> Warning 27 [unused-var-strict]: unused variable o.
> File "semant.ml", line 97, characters 20-22:
> 97 |     | Binop (e1, o, e2) -> (Int, SLiteral(1))
>                          ^^
> Warning 27 [unused-var-strict]: unused variable e2.
> File "semant.ml", line 98, characters 12-13:
> 98 |     | Unop (u, e) -> (Int, SLiteral(1))
>                  ^
> Warning 27 [unused-var-strict]: unused variable u.
> File "semant.ml", line 98, characters 15-16:
> 98 |     | Unop (u, e) -> (Int, SLiteral(1))
>                     ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 99, characters 14-15:
> 99 |     | Assign (s, e)-> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 99, characters 17-18:
> 99 |     | Assign (s, e)-> (Int, SLiteral(1))
>                       ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 100, characters 12-13:
> 100 |     | Call (s, es) -> (Int, SLiteral(1))
>                   ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 100, characters 15-17:
> 100 |     | Call (s, es) -> (Int, SLiteral(1))
>                      ^^
> Warning 27 [unused-var-strict]: unused variable es.
> File "semant.ml", line 101, characters 11-13:
> 101 |     | List es -> (Int, SLiteral(1))
>                  ^^
> Warning 27 [unused-var-strict]: unused variable es.
> File "semant.ml", line 103, characters 13-14:
> 103 |     | BinLit s -> (Int, SLiteral(1))
>                    ^
> Warning 27 [unused-var-strict]: unused variable s.
> File "semant.ml", line 105, characters 12-13:
> 105 |     | Print e -> (Int, SLiteral(1))
>                   ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 106, characters 14-15:
> 106 |     | PrintLn e -> (Int, SLiteral(1))
>                     ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 115, characters 9-12:
> 115 |     Block(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 116, characters 12-15:
> 116 |     | Return(e) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                   ^^^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 117, characters 9-11:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 117, characters 13-16:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                    ^^^
> Warning 27 [unused-var-strict]: unused variable st1.
> File "semant.ml", line 117, characters 18-21:
> 117 |     | If(e1, st1, st2) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                         ^^^
> Warning 27 [unused-var-strict]: unused variable st2.
> File "semant.ml", line 118, characters 10-12:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                 ^^
> Warning 27 [unused-var-strict]: unused variable e1.
> File "semant.ml", line 118, characters 14-16:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                     ^^
> Warning 27 [unused-var-strict]: unused variable e2.
> File "semant.ml", line 118, characters 18-20:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                         ^^
> Warning 27 [unused-var-strict]: unused variable e3.
> File "semant.ml", line 118, characters 22-24:
> 118 |     | For(e1, e2, e3, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                             ^^
> Warning 27 [unused-var-strict]: unused variable st.
> File "semant.ml", line 119, characters 12-13:
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                   ^
> Warning 27 [unused-var-strict]: unused variable e.
> File "semant.ml", line 119, characters 15-17:
> 119 |     | While(e, st) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                      ^^
> Warning 27 [unused-var-strict]: unused variable st.
> File "semant.ml", line 120, characters 9-16:
> 120 |     | Var(vdecl) -> (scope, SReturn((Int, SLiteral(1))) :: acc)
>                ^^^^^^^
> Warning 27 [unused-var-strict]: unused variable vdecl.
$ (cd _build/default && /Users/luellaoudille/.opam/4.14.0/bin/ocamlopt.opt -w @1..3@5..28@30..39@43@46..47@49..57@61..62@67@69-40 -strict-sequence -strict-formats -short-paths -keep-locs -warn-error -A -g -o toplevel.exe .toplevel.eobjs/native/dune__exe.cmx .toplevel.eobjs/native/dune__exe__Ast.cmx .toplevel.eobjs/native/dune__exe__Parser.cmx .toplevel.eobjs/native/dune__exe__Sast.cmx .toplevel.eobjs/native/dune__exe__Scanner.cmx .toplevel.eobjs/native/dune__exe__Semant.cmx .toplevel.eobjs/native/dune__exe__Toplevel.cmx)
