type token =
    WORD
  | WHILE
  | VOID
  | TIMES
  | STRINGLIT of string
  | STRING
  | SEMI
  | RSHIFT
  | RPAREN
  | RETURN
  | RBRACK
  | RBRACE
  | PLUS
  | OR
  | NULL
  | NOT
  | NIBBLE
  | NEQ
  | MINUS
  | LT
  | LSHIFT
  | LPAREN
  | LITERAL of int
  | LIST
  | LEQ
  | LBRACK
  | LBRACE
  | INT
  | IF
  | ID of string
  | GT
  | GEQ
  | FUNC
  | FOR
  | EQ
  | EOF
  | ELSE
  | DIVIDE
  | CONS
  | CONCAT
  | COMMA
  | CHARLIT of char
  | CHAR
  | CDR
  | CAR
  | BYTE
  | BOOL
  | BLIT of bool
  | BIT
  | BINXOR
  | BINOR
  | BINNOT
  | BINLIT of string
  | BINAND
  | ASSIGN
  | AND
val menhir_begin_marker : int
val xv_vdecl : Ast.vdecl
val xv_typ_opt : Ast.typ list
val xv_typ_list : Ast.typ list
val xv_typ : Ast.typ
val xv_stmt_list : Ast.stmt list
val xv_stmt : Ast.stmt
val xv_separated_nonempty_list_COMMA_expr_ : Ast.expr list
val xv_separated_list_COMMA_expr_ : Ast.expr list
val xv_program : Ast.program
val xv_loption_separated_nonempty_list_COMMA_expr__ : Ast.expr list
val xv_list_fields : Ast.expr list
val xv_formals_opt : Ast.bind list
val xv_formal_list : Ast.bind list
val xv_fdecl : Ast.fdecl
val xv_expr_opt : Ast.expr
val xv_expr : Ast.expr
val xv_decls : Ast.vdecl list * Ast.fdecl list
val xv_args_opt : Ast.expr list
val xv_args_list : Ast.expr list
val menhir_end_marker : int
